# Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков.
# Проанализировать результат и определить программы с наиболее эффективным использованием памяти.

# Сформировать из введеного числа обратное по порядку входящих в него цифр и вывести на экран.
# Например, если введено 3486, то надо вывести число 6843.

# Выполнено на 32 битной систе на версии Python 3.8.3

import sys
import collections


def memory_show(var):
    print(f'Объект {var} имеет тип {var.__class__} и занимает {sys.getsizeof(var)} байт')

    if hasattr(var, '__iter__') and not isinstance(var, str):
        if hasattr(var, 'items'):
            for kv in var.items:
                memory_show(kv)
        for el in var:
            memory_show(el)


"""Первый вариант"""

num = int(input('Введите число: '))
res = 0

while num > 0:
    res = res * 10 + num % 10
    num = num // 10

# print(res)

memory_show(res)

# Объект 6943 имеет тип <class 'int'> и занимает 14 байт

"""Второй вариант"""

num = input('\nВведите число: ')
res = ''

for i in num:
    res = i + res
# print(res)

memory_show(res)

# Объект 6943 имеет тип <class 'str'> и занимает 29 байт

"""Третий вариант"""

num = input('\nВведите число: ')
num = collections.deque(num)
num.reverse()

# print(num)

memory_show(num)

# Объект deque(['6', '9', '4', '3']) имеет тип <class 'collections.deque'> и занимает 312 байт

"""Вывод: наиболее выгодным с точки зрения затраты памяти является первый способ, т.к. тип int занимает меньше всего места.
Хотя и выглядит несколько сложнее, нежели остальные. Наиболее короткий способ - 2 (всего 2 строчки, не считая объявления переменных)."""
